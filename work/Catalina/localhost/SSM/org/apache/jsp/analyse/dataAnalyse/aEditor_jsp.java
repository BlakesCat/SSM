/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2017-11-07 09:07:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.analyse.dataAnalyse;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class aEditor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>新闻来源访问量分析</title>\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/analyse/common/header.jsp", out, false);
      out.write("\r\n");
      out.write("    <!-- 这里用requirejs来做模块加载器 -->\r\n");
      out.write("    <script src=\"http://requirejs.org/docs/release/2.1.20/minified/require.js\"></script>\r\n");
      out.write("    <!-- Chartx图表库文件引入，这里已1.9.21的cdn版本为例 -->\r\n");
      out.write("    <script src=\"http://g.tbcdn.cn/thx/charts/1.9.51/chartx/index-min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body >\r\n");
      out.write("\r\n");
      out.write("<div align=\"center\">\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/analyse/common/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("<!-- 为Chartx准备一个具备大小（宽高）的Dom -->\r\n");
      out.write("    <h3 >新闻来源访问分析</h3><br><br>\r\n");
      out.write("    <h3>新闻来源访问量Top10</h3><br>\r\n");
      out.write("<div id=\"allTest\" style=\"width:600px;height:600px;\">\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 为Chartx准备一个具备大小（宽高）的Dom -->\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 为Chartx准备一个具备大小（宽高）的Dom -->\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    //chart的数据格式，xChart中所有的图表数据格式都是这样的二维数组，\r\n");
      out.write("    var data = [\r\n");
      out.write("        [\"node\", \"value\"],\r\n");
      out.write("        [\"梦斩千钧\", 625],\r\n");
      out.write("        [\"栀颜丶\", 606],\r\n");
      out.write("        [\"我在乎你在乎的在乎\", 382],\r\n");
      out.write("        [\"微在趣闻社\", 95],\r\n");
      out.write("        [\"如果当初下手早\", 75],\r\n");
      out.write("        [\"牛奶月小芒\", 66],\r\n");
      out.write("        [\"汽车洋葱圈\", 55],\r\n");
      out.write("        [\"玩数码频道\", 48],\r\n");
      out.write("        [\"日式神吐槽\", 47],\r\n");
      out.write("        [\"羽烈王\",41]\r\n");
      out.write("\r\n");
      out.write("    ];\r\n");
      out.write("    var options = {\r\n");
      out.write("        xAxis: {\r\n");
      out.write("            field: \"node\"\r\n");
      out.write("        },\r\n");
      out.write("        yAxis: {\r\n");
      out.write("            field: \"value\"\r\n");
      out.write("        },\r\n");
      out.write("        tips: {\r\n");
      out.write("            //enabled  : false,\r\n");
      out.write("            content: function (info) {\r\n");
      out.write("                return info.name + \"：\" + info.percentage + \"%\"\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        //周边tip\r\n");
      out.write("        dataLabel: {\r\n");
      out.write("            //enabled: false,\r\n");
      out.write("            //是否绘制连接线(注意：此配置仅限于扇形块比较分散，若扇形比较紧密时，无连线会导致识别混淆)\r\n");
      out.write("            //allowLine:false,\r\n");
      out.write("            //format: '{point.name} : {point.y}' //和下面等价\r\n");
      out.write("            format: function (data) {\r\n");
      out.write("                return \"<div><span>\" + data.name + \"</span>：<span>\" + data.y + \"（\" + data.percentage + \"%）</span></div>\"\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        },\r\n");
      out.write("        //饼图的起始角度[有效值范围0-360度，默认值0度\r\n");
      out.write("        //饼图的绘制是从起始角度开始，顺时针绘制，参考饼图的绘制动画.\r\n");
      out.write("        startAngle: -180,\r\n");
      out.write("        //数据排序，默认按用户给定顺序[desc/asc]\r\n");
      out.write("        sort: 'desc',\r\n");
      out.write("        //是否允许扇形hover时slice,若设置为false,则单击扇形触发slice\r\n");
      out.write("        allowPointSelect: true,\r\n");
      out.write("\r\n");
      out.write("        //是否允许动画\r\n");
      out.write("        animation: true,\r\n");
      out.write("        //内圆半径\r\n");
      out.write("        innerRadius: 120,\r\n");
      out.write("        radius: [ '100%'],\r\n");
      out.write("\r\n");
      out.write("        //颜色序列,若不设置，会有默认的颜色序列\r\n");
      out.write("        //colors:['red', 'yellow', 'blue']\r\n");
      out.write("\r\n");
      out.write("        checked: {\r\n");
      out.write("            enabled: true\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("    Chartx.pie(\"allTest\", data, options).then(function (pie) {\r\n");
      out.write("        window.pie = pie;\r\n");
      out.write("        //pie.slice(3);\r\n");
      out.write("        pie.on('focus', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("        pie.on('unfocus', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("        pie.on('click', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("        pie.on('mousedown', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("        pie.on('mouseup', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("        pie.on('mousemove', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("        pie.on('dblclick', function (e) {\r\n");
      out.write("            console.log(e.type);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        _.each( pie.getLabelList() , function( pos ){\r\n");
      out.write("            $(\"#canvasTest\").append(\"<div style='position:absolute;width:\"+pos.width+\"px;height:\"+pos.height+\"px;left:\"+pos.x+\"px;top:\"+pos.y+\"px;border:1px solid #ffd296;'></div>\");\r\n");
      out.write("        } );\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
